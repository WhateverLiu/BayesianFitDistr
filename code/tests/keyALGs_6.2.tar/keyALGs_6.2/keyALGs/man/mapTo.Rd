\name{mapTo}
\alias{mapTo}
\title{
Sampling from discrete distribution.
}
\description{
Inverse CDF for discrete distribution
}
\usage{
mapTo(rv, cdf)
}
\arguments{
\item{rv}{A vector of probabilities.}
\item{cdf}{A CDF.}
}
\value{
A vector of the corresponding variables. The variable will always be the upper bound if the probability is in the middle. For example, if the CDF is

X 1    2     3

P    0.1  0.3   1

and the probability is 0.6, then the function will return 3.
}
\details{Function written in C++. The function performs a binary search for the nearest neighbor procedure. If }
\examples{
# distx is a 64-grid PDF
distx=data.frame(val=c(100000,  104952,  109903,	114855,	119806,	124758,	129709,	134661,
                       139613,	144564,	149516,	154467,	159419,	164370,	169322,	174273,	179225,
                       184177,	189128,	194080,	199031,	203983,	208934,	213886,	218838,	223789,	228741,
                       233692,	238644,	243595,	248547,	253499,	258450,	263402,	268353,	273305,	278256,
                       283208,	288159,	293111,	298063,	303014,	307966,	312917,	317869,	322820,	327772,
                       332724,	337675,	342627,	347578,	352530,	357481,	362433,	367385,	372336,	377288,
                       382239,	387191,	392142,	397094,	402046,	406997,	411949),
                 P=c(0.000420538412560489,  0.00151262202738884,	0.00150644604892484,	0.00213074611228298,
                     0.00317841525681101,	0.00713044060380327,	0.0119599757158977,	0.0156976772366707,	0.0216411188644905,
                     0.0210695545954655,	0.0254070024488484,	0.0339428095113907,	0.0358124979611766,	0.0444045240253137,
                     0.0505121544070376,	0.0498924391917812,	0.0472783964819991,	0.0450385187191158,	0.0493755430167589,
                     0.053597745853602,	0.0513450160300626,	0.0476531795492083,	0.0439870742202037,	0.04410518035542,
                     0.0398965134192556,	0.0293035959190562,	0.0259515834088811,	0.0259171487398983,	0.0246874210479257,
                     0.0228934791202618,	0.0183780618137054,	0.0167643197625398,	0.0127776319198261,	0.0115424020175286,
                     0.010746325639359,	0.00919628872310223,	0.00739928161428522,	0.00578970823608668,	0.00548905460838481,
                     0.00335269017371973,	0.00410189090327086,	0.00338449027976764,	0.0015613105857799,	0.00191765887570218,
                     0.00193118967623474,	0.001330122218974,	0.00141567960846361,	0.00154868847519111,	0.00105004770116849,
                     0.00056825133324428,	6.41412821723864E-05,	0.000213404536822176,	0.000134712385378264,	0.000343224808016287,
                     0.000118803585099527,	0.000166417184683746,	0,	0,	0,	0.000442059979508956,	0.000202250407240964,
                     0.000335475211946206,	0.000240917526303873,	0.000244140625))

# Compute its CDF
distxC=data.frame(distx$val,P=cumsum(distx$P))

# generate 5 losses in 1 run from this distribution
mapTo(runif(5), distxC)

# Time of generating 5 losses 1,000,000 times from this distribution
system.time(for(i in 1:1000000)mapTo(runif(5),distxC))
}
