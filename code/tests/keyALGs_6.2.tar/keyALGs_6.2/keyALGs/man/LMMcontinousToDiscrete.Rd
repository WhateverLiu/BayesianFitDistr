% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lmm.r
\name{LMMcontinousToDiscrete}
\alias{LMMcontinousToDiscrete}
\title{Discretize probability density function (PDF)}
\usage{
LMMcontinousToDiscrete(pdfun, ..., gd, subdivisions = 1000000L)
}
\arguments{
\item{pdfun}{Probability density function (PDF) \code{pdfun(x, ...)},
e.g., \code{dnorm(x, ...)}.}

\item{\dots}{Additional parameters to \code{pdfun()}.}

\item{gd}{A sorted numeric vector. Support of the result PMF.}

\item{subdivisions}{The range of \code{gd} is discretized into 
\code{subdivisions} intervals for numeric integration.}
}
\value{
A 2-column data frame as the regrided PMF. Column names are
\code{"val"} and \code{"P"}.
}
\description{
Discretize PDF using local (up to 2nd) moment matching
}
\details{
Let \code{Min = gd[1], Max = gd[length(gd)], d = (Max - Min) / subdivisions}.
This function (i) evaluates the probability densities at support points 
\code{{Min, Min + d, Min + 2d, ..., Max}} using \code{pdfun}, (ii) creates a 
PMF of the support and normalized densities, (iii) regrid the PMF to 
\code{gd} using local moment matching. 

If the CDF (\code{cdfun})
corresponding to \code{pdfun} is computationally efficient, e.g., 
\code{pnorm} corresponding to \code{dnorm}, one can also (i) evaluate the cumulative 
probabilities at support points \code{{Min, Min + d, Min + 2d, ..., Max}} 
using \code{cdfun}, (ii) creates a PMF of the support and the differenced 
cumulative probabilities, (iii) regrid the PMF to \code{gd} using local 
moment matching.
}
\note{
One should not expect the result PMF to have precisely equal moments 
to the theoretical distribution's, especially if the theoretical distribution 
has infinite support. See Examples.
}
\examples{
# =====================================================================================
# Discretize gamma distribution with shape = 2, rate = 1 / 2.
# Theoretical mean = 2 / (1 / 2) = 4.
# Theoretical variance = 2 / (1 / 2) ^ 2 = 8.
# =====================================================================================
support = seq(0, 15, len = 64)
disctre1 = keyALGs::LMMcontinousToDiscrete(dgamma, 2, 1 / 2, gd = support)
keyALGs::Mean(disctre1); keyALGs::Var(disctre1)
# 3.937484
# 7.183387


support = seq(0, 30, len = 64)
disctre2 = keyALGs::LMMcontinousToDiscrete(dgamma, 2, 1 / 2, gd = support)
keyALGs::Mean(disctre2); keyALGs::Var(disctre2)
# 3.999862
# 7.996146


support = seq(0, 60, len = 64)
disctre3 = keyALGs::LMMcontinousToDiscrete(dgamma, 2, 1 / 2, gd = support)
keyALGs::Mean(disctre3); keyALGs::Var(disctre3)
# 4
# 8


support = seq(0, qgamma(1 - 1e-10, 2, 1 / 2), len = 64)
disctre4 = keyALGs::LMMcontinousToDiscrete(dgamma, 2, 1 / 2, gd = support)
keyALGs::Mean(disctre4); keyALGs::Var(disctre4)
# 4
# 8
}
