// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rglr
DataFrame rglr(DataFrame X, NumericVector ngd);
RcppExport SEXP _keyALGs_rglr(SEXP XSEXP, SEXP ngdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    rcpp_result_gen = Rcpp::wrap(rglr(X, ngd));
    return rcpp_result_gen;
END_RCPP
}
// convBt
DataFrame convBt(DataFrame X, DataFrame Y, double eps);
RcppExport SEXP _keyALGs_convBt(SEXP XSEXP, SEXP YSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(convBt(X, Y, eps));
    return rcpp_result_gen;
END_RCPP
}
// inverseRglr
DataFrame inverseRglr(DataFrame X, NumericVector ngd, bool normalize);
RcppExport SEXP _keyALGs_inverseRglr(SEXP XSEXP, SEXP ngdSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseRglr(X, ngd, normalize));
    return rcpp_result_gen;
END_RCPP
}
// gm2dParallel
List gm2dParallel(NumericVector Long, NumericVector Lat, NumericVector val, NumericVector weight, NumericVector miu1, NumericVector miu2, NumericVector var1, NumericVector var2, NumericVector covar, double weightEPS, double convergeEPS, int maxit, int showProgress, int NofCore, bool convergeRelativeDiff, double ellipseAxisRatioThreshold);
RcppExport SEXP _keyALGs_gm2dParallel(SEXP LongSEXP, SEXP LatSEXP, SEXP valSEXP, SEXP weightSEXP, SEXP miu1SEXP, SEXP miu2SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP covarSEXP, SEXP weightEPSSEXP, SEXP convergeEPSSEXP, SEXP maxitSEXP, SEXP showProgressSEXP, SEXP NofCoreSEXP, SEXP convergeRelativeDiffSEXP, SEXP ellipseAxisRatioThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Long(LongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lat(LatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu1(miu1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu2(miu2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covar(covarSEXP);
    Rcpp::traits::input_parameter< double >::type weightEPS(weightEPSSEXP);
    Rcpp::traits::input_parameter< double >::type convergeEPS(convergeEPSSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< int >::type NofCore(NofCoreSEXP);
    Rcpp::traits::input_parameter< bool >::type convergeRelativeDiff(convergeRelativeDiffSEXP);
    Rcpp::traits::input_parameter< double >::type ellipseAxisRatioThreshold(ellipseAxisRatioThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(gm2dParallel(Long, Lat, val, weight, miu1, miu2, var1, var2, covar, weightEPS, convergeEPS, maxit, showProgress, NofCore, convergeRelativeDiff, ellipseAxisRatioThreshold));
    return rcpp_result_gen;
END_RCPP
}
// gm2d
List gm2d(NumericVector Long, NumericVector Lat, NumericVector val, NumericVector weight, NumericVector miu1, NumericVector miu2, NumericVector var1, NumericVector var2, NumericVector covar, double weightEPS, double convergeEPS, int maxit, int showProgress, bool useRelativeDiff, double ellipseAxisRatioThreshold);
RcppExport SEXP _keyALGs_gm2d(SEXP LongSEXP, SEXP LatSEXP, SEXP valSEXP, SEXP weightSEXP, SEXP miu1SEXP, SEXP miu2SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP covarSEXP, SEXP weightEPSSEXP, SEXP convergeEPSSEXP, SEXP maxitSEXP, SEXP showProgressSEXP, SEXP useRelativeDiffSEXP, SEXP ellipseAxisRatioThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Long(LongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lat(LatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu1(miu1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu2(miu2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covar(covarSEXP);
    Rcpp::traits::input_parameter< double >::type weightEPS(weightEPSSEXP);
    Rcpp::traits::input_parameter< double >::type convergeEPS(convergeEPSSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< bool >::type useRelativeDiff(useRelativeDiffSEXP);
    Rcpp::traits::input_parameter< double >::type ellipseAxisRatioThreshold(ellipseAxisRatioThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(gm2d(Long, Lat, val, weight, miu1, miu2, var1, var2, covar, weightEPS, convergeEPS, maxit, showProgress, useRelativeDiff, ellipseAxisRatioThreshold));
    return rcpp_result_gen;
END_RCPP
}
// gm2dComponentWise
List gm2dComponentWise(NumericVector Long, NumericVector Lat, NumericVector val, NumericVector weight, NumericVector miu1, NumericVector miu2, NumericVector var1, NumericVector var2, NumericVector covar, double weightEPS, double convergeEPS, int maxit, int showProgress, bool useRelativeDiff, double ellipseAxisRatioThreshold);
RcppExport SEXP _keyALGs_gm2dComponentWise(SEXP LongSEXP, SEXP LatSEXP, SEXP valSEXP, SEXP weightSEXP, SEXP miu1SEXP, SEXP miu2SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP covarSEXP, SEXP weightEPSSEXP, SEXP convergeEPSSEXP, SEXP maxitSEXP, SEXP showProgressSEXP, SEXP useRelativeDiffSEXP, SEXP ellipseAxisRatioThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Long(LongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lat(LatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu1(miu1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type miu2(miu2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covar(covarSEXP);
    Rcpp::traits::input_parameter< double >::type weightEPS(weightEPSSEXP);
    Rcpp::traits::input_parameter< double >::type convergeEPS(convergeEPSSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< bool >::type useRelativeDiff(useRelativeDiffSEXP);
    Rcpp::traits::input_parameter< double >::type ellipseAxisRatioThreshold(ellipseAxisRatioThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(gm2dComponentWise(Long, Lat, val, weight, miu1, miu2, var1, var2, covar, weightEPS, convergeEPS, maxit, showProgress, useRelativeDiff, ellipseAxisRatioThreshold));
    return rcpp_result_gen;
END_RCPP
}
// GMKtotalVarCpp
double GMKtotalVarCpp(List location, List GMkernel, NumericVector locationVar, NumericMatrix corM, double weightEPS, bool outputCorM, bool useMahalanobisD);
RcppExport SEXP _keyALGs_GMKtotalVarCpp(SEXP locationSEXP, SEXP GMkernelSEXP, SEXP locationVarSEXP, SEXP corMSEXP, SEXP weightEPSSEXP, SEXP outputCorMSEXP, SEXP useMahalanobisDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type location(locationSEXP);
    Rcpp::traits::input_parameter< List >::type GMkernel(GMkernelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locationVar(locationVarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corM(corMSEXP);
    Rcpp::traits::input_parameter< double >::type weightEPS(weightEPSSEXP);
    Rcpp::traits::input_parameter< bool >::type outputCorM(outputCorMSEXP);
    Rcpp::traits::input_parameter< bool >::type useMahalanobisD(useMahalanobisDSEXP);
    rcpp_result_gen = Rcpp::wrap(GMKtotalVarCpp(location, GMkernel, locationVar, corM, weightEPS, outputCorM, useMahalanobisD));
    return rcpp_result_gen;
END_RCPP
}
// GMKtotalVarCppParallel
double GMKtotalVarCppParallel(List location, List GMkernel, NumericVector locationVar, NumericMatrix corM, IntegerVector indexV, IntegerVector indexVector, double weightEPS, bool outputCorM, bool absorbWeightInLocalCovar, bool useMahalanobisDforWeight);
RcppExport SEXP _keyALGs_GMKtotalVarCppParallel(SEXP locationSEXP, SEXP GMkernelSEXP, SEXP locationVarSEXP, SEXP corMSEXP, SEXP indexVSEXP, SEXP indexVectorSEXP, SEXP weightEPSSEXP, SEXP outputCorMSEXP, SEXP absorbWeightInLocalCovarSEXP, SEXP useMahalanobisDforWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type location(locationSEXP);
    Rcpp::traits::input_parameter< List >::type GMkernel(GMkernelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locationVar(locationVarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corM(corMSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indexV(indexVSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indexVector(indexVectorSEXP);
    Rcpp::traits::input_parameter< double >::type weightEPS(weightEPSSEXP);
    Rcpp::traits::input_parameter< bool >::type outputCorM(outputCorMSEXP);
    Rcpp::traits::input_parameter< bool >::type absorbWeightInLocalCovar(absorbWeightInLocalCovarSEXP);
    Rcpp::traits::input_parameter< bool >::type useMahalanobisDforWeight(useMahalanobisDforWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(GMKtotalVarCppParallel(location, GMkernel, locationVar, corM, indexV, indexVector, weightEPS, outputCorM, absorbWeightInLocalCovar, useMahalanobisDforWeight));
    return rcpp_result_gen;
END_RCPP
}
// vecD
double vecD(NumericVector x, NumericVector y, String ms);
RcppExport SEXP _keyALGs_vecD(SEXP xSEXP, SEXP ySEXP, SEXP msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< String >::type ms(msSEXP);
    rcpp_result_gen = Rcpp::wrap(vecD(x, y, ms));
    return rcpp_result_gen;
END_RCPP
}
// testSampleSort
void testSampleSort(IntegerVector x, int eleByteSize);
RcppExport SEXP _keyALGs_testSampleSort(SEXP xSEXP, SEXP eleByteSizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type eleByteSize(eleByteSizeSEXP);
    testSampleSort(x, eleByteSize);
    return R_NilValue;
END_RCPP
}
// testSampleSortOnKeys
void testSampleSortOnKeys(IntegerMatrix key);
RcppExport SEXP _keyALGs_testSampleSortOnKeys(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type key(keySEXP);
    testSampleSortOnKeys(key);
    return R_NilValue;
END_RCPP
}
// testLowerBounds
IntegerVector testLowerBounds(IntegerVector x, IntegerVector y, int eleByte);
RcppExport SEXP _keyALGs_testLowerBounds(SEXP xSEXP, SEXP ySEXP, SEXP eleByteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type eleByte(eleByteSEXP);
    rcpp_result_gen = Rcpp::wrap(testLowerBounds(x, y, eleByte));
    return rcpp_result_gen;
END_RCPP
}
// testLowerBoundsOnKeys
void testLowerBoundsOnKeys(IntegerMatrix key, IntegerVector splitterInd);
RcppExport SEXP _keyALGs_testLowerBoundsOnKeys(SEXP keySEXP, SEXP splitterIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type key(keySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type splitterInd(splitterIndSEXP);
    testLowerBoundsOnKeys(key, splitterInd);
    return R_NilValue;
END_RCPP
}
// lmm2ndM
List lmm2ndM(DataFrame dist, NumericVector newSupport);
RcppExport SEXP _keyALGs_lmm2ndM(SEXP distSEXP, SEXP newSupportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dist(distSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type newSupport(newSupportSEXP);
    rcpp_result_gen = Rcpp::wrap(lmm2ndM(dist, newSupport));
    return rcpp_result_gen;
END_RCPP
}
// rglr3split
DataFrame rglr3split(DataFrame X, NumericVector ngd);
RcppExport SEXP _keyALGs_rglr3split(SEXP XSEXP, SEXP ngdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    rcpp_result_gen = Rcpp::wrap(rglr3split(X, ngd));
    return rcpp_result_gen;
END_RCPP
}
// rglr4split
DataFrame rglr4split(DataFrame X, NumericVector ngd);
RcppExport SEXP _keyALGs_rglr4split(SEXP XSEXP, SEXP ngdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    rcpp_result_gen = Rcpp::wrap(rglr4split(X, ngd));
    return rcpp_result_gen;
END_RCPP
}
// rglr4splitGuassianKernal
DataFrame rglr4splitGuassianKernal(DataFrame X, NumericVector ngd);
RcppExport SEXP _keyALGs_rglr4splitGuassianKernal(SEXP XSEXP, SEXP ngdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    rcpp_result_gen = Rcpp::wrap(rglr4splitGuassianKernal(X, ngd));
    return rcpp_result_gen;
END_RCPP
}
// truncateDistSingleTest
DataFrame truncateDistSingleTest(DataFrame X, double headTrunc, double tailTrunc);
RcppExport SEXP _keyALGs_truncateDistSingleTest(SEXP XSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    rcpp_result_gen = Rcpp::wrap(truncateDistSingleTest(X, headTrunc, tailTrunc));
    return rcpp_result_gen;
END_RCPP
}
// truncateDistTest
DataFrame truncateDistTest(DataFrame X, double headTrunc, double tailTrunc);
RcppExport SEXP _keyALGs_truncateDistTest(SEXP XSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    rcpp_result_gen = Rcpp::wrap(truncateDistTest(X, headTrunc, tailTrunc));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom4productsAtomUntouched
DataFrame convSplitAtom4productsAtomUntouched(DataFrame X, DataFrame Y, String regridMethod, unsigned N, unsigned forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom4productsAtomUntouched(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom4productsAtomUntouched(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom9productsAtomUntouched
DataFrame convSplitAtom9productsAtomUntouched(DataFrame X, DataFrame Y, String regridMethod, unsigned N, unsigned forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom9productsAtomUntouched(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom9productsAtomUntouched(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom4products
DataFrame convSplitAtom4products(DataFrame X, DataFrame Y, String regridMethod, unsigned N, unsigned forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom4products(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom4products(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom9products
DataFrame convSplitAtom9products(DataFrame X, DataFrame Y, String regridMethod, unsigned N, unsigned forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom9products(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom9products(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom4productsIrregular
DataFrame convSplitAtom4productsIrregular(DataFrame X, DataFrame Y, String regridMethod, int N, int forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom4productsIrregular(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom4productsIrregular(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// convSplitAtom9productsIrregular
DataFrame convSplitAtom9productsIrregular(DataFrame X, DataFrame Y, String regridMethod, unsigned N, unsigned forDeltaCompare, double leftTrunc, double rightTrunc, bool useFFT);
RcppExport SEXP _keyALGs_convSplitAtom9productsIrregular(SEXP XSEXP, SEXP YSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP leftTruncSEXP, SEXP rightTruncSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< double >::type leftTrunc(leftTruncSEXP);
    Rcpp::traits::input_parameter< double >::type rightTrunc(rightTruncSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(convSplitAtom9productsIrregular(X, Y, regridMethod, N, forDeltaCompare, leftTrunc, rightTrunc, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// sequentialConvAll
DataFrame sequentialConvAll(List lisOfDists, String convMethod, double headTrunc, double tailTrunc, String regridMethod, int N, int forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_sequentialConvAll(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(sequentialConvAll(lisOfDists, convMethod, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// sortedSequentialConvAll
DataFrame sortedSequentialConvAll(List lisOfDists, String convMethod, double headTrunc, double tailTrunc, String regridMethod, int N, int forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_sortedSequentialConvAll(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(sortedSequentialConvAll(lisOfDists, convMethod, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// closestPairConvAll
DataFrame closestPairConvAll(List lisOfDists, String convMethod, double headTrunc, double tailTrunc, String regridMethod, unsigned N, unsigned forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_closestPairConvAll(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(closestPairConvAll(lisOfDists, convMethod, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// partition3wayLRMconv
DataFrame partition3wayLRMconv(List lisOfDists, String convMethod, bool single, double headTrunc, double tailTrunc, String regridMethod, unsigned N, unsigned forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_partition3wayLRMconv(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP singleSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(partition3wayLRMconv(lisOfDists, convMethod, single, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// BLDMconv
DataFrame BLDMconv(List lisOfDists, String convMethod, bool single, double headTrunc, double tailTrunc, String regridMethod, unsigned N, unsigned forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_BLDMconv(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP singleSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(BLDMconv(lisOfDists, convMethod, single, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// forBiggestRangeDiff
DataFrame forBiggestRangeDiff(List lisOfDists, String convMethod, bool single, double headTrunc, double tailTrunc, String regridMethod, unsigned N, unsigned forDeltaCompare, bool useFFT);
RcppExport SEXP _keyALGs_forBiggestRangeDiff(SEXP lisOfDistsSEXP, SEXP convMethodSEXP, SEXP singleSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type convMethod(convMethodSEXP);
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(forBiggestRangeDiff(lisOfDists, convMethod, single, headTrunc, tailTrunc, regridMethod, N, forDeltaCompare, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// lowerBound
IntegerVector lowerBound(NumericVector x, NumericVector v);
RcppExport SEXP _keyALGs_lowerBound(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(lowerBound(x, v));
    return rcpp_result_gen;
END_RCPP
}
// como
DataFrame como(DataFrame X, DataFrame Y, int N, String rgMethod, bool isUsedInCounterComo);
RcppExport SEXP _keyALGs_como(SEXP XSEXP, SEXP YSEXP, SEXP NSEXP, SEXP rgMethodSEXP, SEXP isUsedInCounterComoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< String >::type rgMethod(rgMethodSEXP);
    Rcpp::traits::input_parameter< bool >::type isUsedInCounterComo(isUsedInCounterComoSEXP);
    rcpp_result_gen = Rcpp::wrap(como(X, Y, N, rgMethod, isUsedInCounterComo));
    return rcpp_result_gen;
END_RCPP
}
// comoJoint2D
DataFrame comoJoint2D(List X, List Y);
RcppExport SEXP _keyALGs_comoJoint2D(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(comoJoint2D(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// mixConv2dist
DataFrame mixConv2dist(List dist1, List dist2, double corWanted, char regridMethod, int N, double dist1var, double dist2var, bool useFFT);
RcppExport SEXP _keyALGs_mixConv2dist(SEXP dist1SEXP, SEXP dist2SEXP, SEXP corWantedSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP dist1varSEXP, SEXP dist2varSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dist1(dist1SEXP);
    Rcpp::traits::input_parameter< List >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< double >::type corWanted(corWantedSEXP);
    Rcpp::traits::input_parameter< char >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type dist1var(dist1varSEXP);
    Rcpp::traits::input_parameter< double >::type dist2var(dist2varSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(mixConv2dist(dist1, dist2, corWanted, regridMethod, N, dist1var, dist2var, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// mixConv2distGivenVar
DataFrame mixConv2distGivenVar(List dist1, List dist2, double varWanted, char regridMethod, int N, double dist1var, double dist2var, bool useFFT);
RcppExport SEXP _keyALGs_mixConv2distGivenVar(SEXP dist1SEXP, SEXP dist2SEXP, SEXP varWantedSEXP, SEXP regridMethodSEXP, SEXP NSEXP, SEXP dist1varSEXP, SEXP dist2varSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dist1(dist1SEXP);
    Rcpp::traits::input_parameter< List >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< double >::type varWanted(varWantedSEXP);
    Rcpp::traits::input_parameter< char >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type dist1var(dist1varSEXP);
    Rcpp::traits::input_parameter< double >::type dist2var(dist2varSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(mixConv2distGivenVar(dist1, dist2, varWanted, regridMethod, N, dist1var, dist2var, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// mixConvSample
List mixConvSample(List sampleListR, List fullDistListR, List gridIndex, NumericVector corsR, char regridMethod, double headTrunc, double tailTrunc, unsigned N, unsigned forDeltaCompare, bool single, int maxCore, bool useFFT);
RcppExport SEXP _keyALGs_mixConvSample(SEXP sampleListRSEXP, SEXP fullDistListRSEXP, SEXP gridIndexSEXP, SEXP corsRSEXP, SEXP regridMethodSEXP, SEXP headTruncSEXP, SEXP tailTruncSEXP, SEXP NSEXP, SEXP forDeltaCompareSEXP, SEXP singleSEXP, SEXP maxCoreSEXP, SEXP useFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sampleListR(sampleListRSEXP);
    Rcpp::traits::input_parameter< List >::type fullDistListR(fullDistListRSEXP);
    Rcpp::traits::input_parameter< List >::type gridIndex(gridIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type corsR(corsRSEXP);
    Rcpp::traits::input_parameter< char >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< double >::type headTrunc(headTruncSEXP);
    Rcpp::traits::input_parameter< double >::type tailTrunc(tailTruncSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type forDeltaCompare(forDeltaCompareSEXP);
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< bool >::type useFFT(useFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(mixConvSample(sampleListR, fullDistListR, gridIndex, corsR, regridMethod, headTrunc, tailTrunc, N, forDeltaCompare, single, maxCore, useFFT));
    return rcpp_result_gen;
END_RCPP
}
// covarMatSum
NumericVector covarMatSum(List sampleList, NumericVector variances, NumericVector cors, List gridInd, int maxCore);
RcppExport SEXP _keyALGs_covarMatSum(SEXP sampleListSEXP, SEXP variancesSEXP, SEXP corsSEXP, SEXP gridIndSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sampleList(sampleListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cors(corsSEXP);
    Rcpp::traits::input_parameter< List >::type gridInd(gridIndSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(covarMatSum(sampleList, variances, cors, gridInd, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// generateCorMultiplier
NumericVector generateCorMultiplier(NumericVector var, List gridIndR);
RcppExport SEXP _keyALGs_generateCorMultiplier(SEXP varSEXP, SEXP gridIndRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type var(varSEXP);
    Rcpp::traits::input_parameter< List >::type gridIndR(gridIndRSEXP);
    rcpp_result_gen = Rcpp::wrap(generateCorMultiplier(var, gridIndR));
    return rcpp_result_gen;
END_RCPP
}
// comoDistList
DataFrame comoDistList(List lisOfDists, String regridMethod, int N);
RcppExport SEXP _keyALGs_comoDistList(SEXP lisOfDistsSEXP, SEXP regridMethodSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lisOfDists(lisOfDistsSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(comoDistList(lisOfDists, regridMethod, N));
    return rcpp_result_gen;
END_RCPP
}
// Mean
double Mean(List X);
RcppExport SEXP _keyALGs_Mean(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean(X));
    return rcpp_result_gen;
END_RCPP
}
// Var
double Var(List X);
RcppExport SEXP _keyALGs_Var(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Var(X));
    return rcpp_result_gen;
END_RCPP
}
// encode
void encode(std::string inputPath, std::string filetype, std::string outputTxtName);
RcppExport SEXP _keyALGs_encode(SEXP inputPathSEXP, SEXP filetypeSEXP, SEXP outputTxtNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< std::string >::type filetype(filetypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputTxtName(outputTxtNameSEXP);
    encode(inputPath, filetype, outputTxtName);
    return R_NilValue;
END_RCPP
}
// decode
void decode(std::string inputTxtPath, std::string outputNameNoFileType);
RcppExport SEXP _keyALGs_decode(SEXP inputTxtPathSEXP, SEXP outputNameNoFileTypeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputTxtPath(inputTxtPathSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputNameNoFileType(outputNameNoFileTypeSEXP);
    decode(inputTxtPath, outputNameNoFileType);
    return R_NilValue;
END_RCPP
}
// matmul
NumericMatrix matmul(NumericMatrix X, NumericMatrix Y, int maxCore, bool bidir);
RcppExport SEXP _keyALGs_matmul(SEXP XSEXP, SEXP YSEXP, SEXP maxCoreSEXP, SEXP bidirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< bool >::type bidir(bidirSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul(X, Y, maxCore, bidir));
    return rcpp_result_gen;
END_RCPP
}
// mapTo
std::vector<double> mapTo(NumericVector rv, DataFrame cdf);
RcppExport SEXP _keyALGs_mapTo(SEXP rvSEXP, SEXP cdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rv(rvSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type cdf(cdfSEXP);
    rcpp_result_gen = Rcpp::wrap(mapTo(rv, cdf));
    return rcpp_result_gen;
END_RCPP
}
// LHS
NumericVector LHS(DataFrame pdf, int N);
RcppExport SEXP _keyALGs_LHS(SEXP pdfSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type pdf(pdfSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(LHS(pdf, N));
    return rcpp_result_gen;
END_RCPP
}
// testG3dVal
double testG3dVal(NumericVector x, NumericVector para);
RcppExport SEXP _keyALGs_testG3dVal(SEXP xSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(testG3dVal(x, para));
    return rcpp_result_gen;
END_RCPP
}
// testAddr
void testAddr(IntegerVector x);
RcppExport SEXP _keyALGs_testAddr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    testAddr(x);
    return R_NilValue;
END_RCPP
}
// vecAssign
void vecAssign(SEXP orginalV, IntegerVector index, SEXP newValueV);
RcppExport SEXP _keyALGs_vecAssign(SEXP orginalVSEXP, SEXP indexSEXP, SEXP newValueVSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type orginalV(orginalVSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newValueV(newValueVSEXP);
    vecAssign(orginalV, index, newValueV);
    return R_NilValue;
END_RCPP
}
// cholDecomp
NumericMatrix cholDecomp(NumericMatrix A, int maxCore, bool useFullPara);
RcppExport SEXP _keyALGs_cholDecomp(SEXP ASEXP, SEXP maxCoreSEXP, SEXP useFullParaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< bool >::type useFullPara(useFullParaSEXP);
    rcpp_result_gen = Rcpp::wrap(cholDecomp(A, maxCore, useFullPara));
    return rcpp_result_gen;
END_RCPP
}
// armaSolve
arma::colvec armaSolve(arma::mat& X, arma::colvec& y, bool fastsolve);
RcppExport SEXP _keyALGs_armaSolve(SEXP XSEXP, SEXP ySEXP, SEXP fastsolveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type fastsolve(fastsolveSEXP);
    rcpp_result_gen = Rcpp::wrap(armaSolve(X, y, fastsolve));
    return rcpp_result_gen;
END_RCPP
}
// guassSeidelSolveDense
arma::mat guassSeidelSolveDense(arma::mat& X, arma::colvec& y, int maxIter, double convergenceEPS);
RcppExport SEXP _keyALGs_guassSeidelSolveDense(SEXP XSEXP, SEXP ySEXP, SEXP maxIterSEXP, SEXP convergenceEPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type convergenceEPS(convergenceEPSSEXP);
    rcpp_result_gen = Rcpp::wrap(guassSeidelSolveDense(X, y, maxIter, convergenceEPS));
    return rcpp_result_gen;
END_RCPP
}
// paraOLS
List paraOLS(NumericVector y, NumericMatrix X, int maxCore, int verboseInt, bool useGaussSeidel, int maxIter, double convergenceEPS);
RcppExport SEXP _keyALGs_paraOLS(SEXP ySEXP, SEXP XSEXP, SEXP maxCoreSEXP, SEXP verboseIntSEXP, SEXP useGaussSeidelSEXP, SEXP maxIterSEXP, SEXP convergenceEPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type verboseInt(verboseIntSEXP);
    Rcpp::traits::input_parameter< bool >::type useGaussSeidel(useGaussSeidelSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type convergenceEPS(convergenceEPSSEXP);
    rcpp_result_gen = Rcpp::wrap(paraOLS(y, X, maxCore, verboseInt, useGaussSeidel, maxIter, convergenceEPS));
    return rcpp_result_gen;
END_RCPP
}
// fullMatToSparseCol
List fullMatToSparseCol(NumericMatrix Xmat);
RcppExport SEXP _keyALGs_fullMatToSparseCol(SEXP XmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP);
    rcpp_result_gen = Rcpp::wrap(fullMatToSparseCol(Xmat));
    return rcpp_result_gen;
END_RCPP
}
// fullMatToSparseRow
List fullMatToSparseRow(NumericMatrix Xmat);
RcppExport SEXP _keyALGs_fullMatToSparseRow(SEXP XmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP);
    rcpp_result_gen = Rcpp::wrap(fullMatToSparseRow(Xmat));
    return rcpp_result_gen;
END_RCPP
}
// fullMatToSparseRowArmaFormat
List fullMatToSparseRowArmaFormat(arma::mat& Xmat);
RcppExport SEXP _keyALGs_fullMatToSparseRowArmaFormat(SEXP XmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Xmat(XmatSEXP);
    rcpp_result_gen = Rcpp::wrap(fullMatToSparseRowArmaFormat(Xmat));
    return rcpp_result_gen;
END_RCPP
}
// guassSeidelSolveSparseDenseInput
NumericVector guassSeidelSolveSparseDenseInput(NumericMatrix X, NumericVector y, int maxIter, double convergenceEPS);
RcppExport SEXP _keyALGs_guassSeidelSolveSparseDenseInput(SEXP XSEXP, SEXP ySEXP, SEXP maxIterSEXP, SEXP convergenceEPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type convergenceEPS(convergenceEPSSEXP);
    rcpp_result_gen = Rcpp::wrap(guassSeidelSolveSparseDenseInput(X, y, maxIter, convergenceEPS));
    return rcpp_result_gen;
END_RCPP
}
// guassSeidelSolveSparseSparseInput
NumericVector guassSeidelSolveSparseSparseInput(List sparseX, NumericVector y, int maxIter, double convergenceEPS);
RcppExport SEXP _keyALGs_guassSeidelSolveSparseSparseInput(SEXP sparseXSEXP, SEXP ySEXP, SEXP maxIterSEXP, SEXP convergenceEPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sparseX(sparseXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type convergenceEPS(convergenceEPSSEXP);
    rcpp_result_gen = Rcpp::wrap(guassSeidelSolveSparseSparseInput(sparseX, y, maxIter, convergenceEPS));
    return rcpp_result_gen;
END_RCPP
}
// paraOLSsparse
List paraOLSsparse(NumericVector y, NumericMatrix X, List sparseMat, double sparseNonZeroThreshold, int maxCore, int verboseInt, bool useGaussSeidel, int maxIter, double convergenceEPS);
RcppExport SEXP _keyALGs_paraOLSsparse(SEXP ySEXP, SEXP XSEXP, SEXP sparseMatSEXP, SEXP sparseNonZeroThresholdSEXP, SEXP maxCoreSEXP, SEXP verboseIntSEXP, SEXP useGaussSeidelSEXP, SEXP maxIterSEXP, SEXP convergenceEPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type sparseMat(sparseMatSEXP);
    Rcpp::traits::input_parameter< double >::type sparseNonZeroThreshold(sparseNonZeroThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type verboseInt(verboseIntSEXP);
    Rcpp::traits::input_parameter< bool >::type useGaussSeidel(useGaussSeidelSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type convergenceEPS(convergenceEPSSEXP);
    rcpp_result_gen = Rcpp::wrap(paraOLSsparse(y, X, sparseMat, sparseNonZeroThreshold, maxCore, verboseInt, useGaussSeidel, maxIter, convergenceEPS));
    return rcpp_result_gen;
END_RCPP
}
// rglr4splitDetails
List rglr4splitDetails(DataFrame X, NumericVector ngd);
RcppExport SEXP _keyALGs_rglr4splitDetails(SEXP XSEXP, SEXP ngdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngd(ngdSEXP);
    rcpp_result_gen = Rcpp::wrap(rglr4splitDetails(X, ngd));
    return rcpp_result_gen;
END_RCPP
}
// rglr2Dcpp
DataFrame rglr2Dcpp(DataFrame dist, NumericVector ngx, NumericVector ngy);
RcppExport SEXP _keyALGs_rglr2Dcpp(SEXP distSEXP, SEXP ngxSEXP, SEXP ngySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dist(distSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngx(ngxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ngy(ngySEXP);
    rcpp_result_gen = Rcpp::wrap(rglr2Dcpp(dist, ngx, ngy));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_keyALGs_rglr", (DL_FUNC) &_keyALGs_rglr, 2},
    {"_keyALGs_convBt", (DL_FUNC) &_keyALGs_convBt, 3},
    {"_keyALGs_inverseRglr", (DL_FUNC) &_keyALGs_inverseRglr, 3},
    {"_keyALGs_gm2dParallel", (DL_FUNC) &_keyALGs_gm2dParallel, 16},
    {"_keyALGs_gm2d", (DL_FUNC) &_keyALGs_gm2d, 15},
    {"_keyALGs_gm2dComponentWise", (DL_FUNC) &_keyALGs_gm2dComponentWise, 15},
    {"_keyALGs_GMKtotalVarCpp", (DL_FUNC) &_keyALGs_GMKtotalVarCpp, 7},
    {"_keyALGs_GMKtotalVarCppParallel", (DL_FUNC) &_keyALGs_GMKtotalVarCppParallel, 10},
    {"_keyALGs_vecD", (DL_FUNC) &_keyALGs_vecD, 3},
    {"_keyALGs_testSampleSort", (DL_FUNC) &_keyALGs_testSampleSort, 2},
    {"_keyALGs_testSampleSortOnKeys", (DL_FUNC) &_keyALGs_testSampleSortOnKeys, 1},
    {"_keyALGs_testLowerBounds", (DL_FUNC) &_keyALGs_testLowerBounds, 3},
    {"_keyALGs_testLowerBoundsOnKeys", (DL_FUNC) &_keyALGs_testLowerBoundsOnKeys, 2},
    {"_keyALGs_lmm2ndM", (DL_FUNC) &_keyALGs_lmm2ndM, 2},
    {"_keyALGs_rglr3split", (DL_FUNC) &_keyALGs_rglr3split, 2},
    {"_keyALGs_rglr4split", (DL_FUNC) &_keyALGs_rglr4split, 2},
    {"_keyALGs_rglr4splitGuassianKernal", (DL_FUNC) &_keyALGs_rglr4splitGuassianKernal, 2},
    {"_keyALGs_truncateDistSingleTest", (DL_FUNC) &_keyALGs_truncateDistSingleTest, 3},
    {"_keyALGs_truncateDistTest", (DL_FUNC) &_keyALGs_truncateDistTest, 3},
    {"_keyALGs_convSplitAtom4productsAtomUntouched", (DL_FUNC) &_keyALGs_convSplitAtom4productsAtomUntouched, 8},
    {"_keyALGs_convSplitAtom9productsAtomUntouched", (DL_FUNC) &_keyALGs_convSplitAtom9productsAtomUntouched, 8},
    {"_keyALGs_convSplitAtom4products", (DL_FUNC) &_keyALGs_convSplitAtom4products, 8},
    {"_keyALGs_convSplitAtom9products", (DL_FUNC) &_keyALGs_convSplitAtom9products, 8},
    {"_keyALGs_convSplitAtom4productsIrregular", (DL_FUNC) &_keyALGs_convSplitAtom4productsIrregular, 8},
    {"_keyALGs_convSplitAtom9productsIrregular", (DL_FUNC) &_keyALGs_convSplitAtom9productsIrregular, 8},
    {"_keyALGs_sequentialConvAll", (DL_FUNC) &_keyALGs_sequentialConvAll, 8},
    {"_keyALGs_sortedSequentialConvAll", (DL_FUNC) &_keyALGs_sortedSequentialConvAll, 8},
    {"_keyALGs_closestPairConvAll", (DL_FUNC) &_keyALGs_closestPairConvAll, 8},
    {"_keyALGs_partition3wayLRMconv", (DL_FUNC) &_keyALGs_partition3wayLRMconv, 9},
    {"_keyALGs_BLDMconv", (DL_FUNC) &_keyALGs_BLDMconv, 9},
    {"_keyALGs_forBiggestRangeDiff", (DL_FUNC) &_keyALGs_forBiggestRangeDiff, 9},
    {"_keyALGs_lowerBound", (DL_FUNC) &_keyALGs_lowerBound, 2},
    {"_keyALGs_como", (DL_FUNC) &_keyALGs_como, 5},
    {"_keyALGs_comoJoint2D", (DL_FUNC) &_keyALGs_comoJoint2D, 2},
    {"_keyALGs_mixConv2dist", (DL_FUNC) &_keyALGs_mixConv2dist, 8},
    {"_keyALGs_mixConv2distGivenVar", (DL_FUNC) &_keyALGs_mixConv2distGivenVar, 8},
    {"_keyALGs_mixConvSample", (DL_FUNC) &_keyALGs_mixConvSample, 12},
    {"_keyALGs_covarMatSum", (DL_FUNC) &_keyALGs_covarMatSum, 5},
    {"_keyALGs_generateCorMultiplier", (DL_FUNC) &_keyALGs_generateCorMultiplier, 2},
    {"_keyALGs_comoDistList", (DL_FUNC) &_keyALGs_comoDistList, 3},
    {"_keyALGs_Mean", (DL_FUNC) &_keyALGs_Mean, 1},
    {"_keyALGs_Var", (DL_FUNC) &_keyALGs_Var, 1},
    {"_keyALGs_encode", (DL_FUNC) &_keyALGs_encode, 3},
    {"_keyALGs_decode", (DL_FUNC) &_keyALGs_decode, 2},
    {"_keyALGs_matmul", (DL_FUNC) &_keyALGs_matmul, 4},
    {"_keyALGs_mapTo", (DL_FUNC) &_keyALGs_mapTo, 2},
    {"_keyALGs_LHS", (DL_FUNC) &_keyALGs_LHS, 2},
    {"_keyALGs_testG3dVal", (DL_FUNC) &_keyALGs_testG3dVal, 2},
    {"_keyALGs_testAddr", (DL_FUNC) &_keyALGs_testAddr, 1},
    {"_keyALGs_vecAssign", (DL_FUNC) &_keyALGs_vecAssign, 3},
    {"_keyALGs_cholDecomp", (DL_FUNC) &_keyALGs_cholDecomp, 3},
    {"_keyALGs_armaSolve", (DL_FUNC) &_keyALGs_armaSolve, 3},
    {"_keyALGs_guassSeidelSolveDense", (DL_FUNC) &_keyALGs_guassSeidelSolveDense, 4},
    {"_keyALGs_paraOLS", (DL_FUNC) &_keyALGs_paraOLS, 7},
    {"_keyALGs_fullMatToSparseCol", (DL_FUNC) &_keyALGs_fullMatToSparseCol, 1},
    {"_keyALGs_fullMatToSparseRow", (DL_FUNC) &_keyALGs_fullMatToSparseRow, 1},
    {"_keyALGs_fullMatToSparseRowArmaFormat", (DL_FUNC) &_keyALGs_fullMatToSparseRowArmaFormat, 1},
    {"_keyALGs_guassSeidelSolveSparseDenseInput", (DL_FUNC) &_keyALGs_guassSeidelSolveSparseDenseInput, 4},
    {"_keyALGs_guassSeidelSolveSparseSparseInput", (DL_FUNC) &_keyALGs_guassSeidelSolveSparseSparseInput, 4},
    {"_keyALGs_paraOLSsparse", (DL_FUNC) &_keyALGs_paraOLSsparse, 9},
    {"_keyALGs_rglr4splitDetails", (DL_FUNC) &_keyALGs_rglr4splitDetails, 2},
    {"_keyALGs_rglr2Dcpp", (DL_FUNC) &_keyALGs_rglr2Dcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_keyALGs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
