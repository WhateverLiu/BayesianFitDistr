// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// p0ensembleLDSlinear
List p0ensembleLDSlinear(NumericVector rawMdr, NumericVector dr, int windowSize, int slidingSpeed, double eps, NumericVector targetMDRs, int Nsample, double sampleSize, int seed, int maxCore);
RcppExport SEXP _NGFMfitDistr_p0ensembleLDSlinear(SEXP rawMdrSEXP, SEXP drSEXP, SEXP windowSizeSEXP, SEXP slidingSpeedSEXP, SEXP epsSEXP, SEXP targetMDRsSEXP, SEXP NsampleSEXP, SEXP sampleSizeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rawMdr(rawMdrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dr(drSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< int >::type slidingSpeed(slidingSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targetMDRs(targetMDRsSEXP);
    Rcpp::traits::input_parameter< int >::type Nsample(NsampleSEXP);
    Rcpp::traits::input_parameter< double >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(p0ensembleLDSlinear(rawMdr, dr, windowSize, slidingSpeed, eps, targetMDRs, Nsample, sampleSize, seed, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// makeP0test
List makeP0test(NumericVector mdr, NumericVector dr, int windowSize, int slidingSpeed, double eps);
RcppExport SEXP _NGFMfitDistr_makeP0test(SEXP mdrSEXP, SEXP drSEXP, SEXP windowSizeSEXP, SEXP slidingSpeedSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mdr(mdrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dr(drSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< int >::type slidingSpeed(slidingSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(makeP0test(mdr, dr, windowSize, slidingSpeed, eps));
    return rcpp_result_gen;
END_RCPP
}
// p0ensembleLDSlinearOld
List p0ensembleLDSlinearOld(NumericVector rawMdr, NumericVector dr, int windowSize, int slidingSpeed, double eps, NumericVector targetMDRs, int Nsample, double sampleSizeRatio, int seed, int maxCore);
RcppExport SEXP _NGFMfitDistr_p0ensembleLDSlinearOld(SEXP rawMdrSEXP, SEXP drSEXP, SEXP windowSizeSEXP, SEXP slidingSpeedSEXP, SEXP epsSEXP, SEXP targetMDRsSEXP, SEXP NsampleSEXP, SEXP sampleSizeRatioSEXP, SEXP seedSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rawMdr(rawMdrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dr(drSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< int >::type slidingSpeed(slidingSpeedSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targetMDRs(targetMDRsSEXP);
    Rcpp::traits::input_parameter< int >::type Nsample(NsampleSEXP);
    Rcpp::traits::input_parameter< double >::type sampleSizeRatio(sampleSizeRatioSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(p0ensembleLDSlinearOld(rawMdr, dr, windowSize, slidingSpeed, eps, targetMDRs, Nsample, sampleSizeRatio, seed, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// assignP0
void assignP0(NumericVector p, double p0);
RcppExport SEXP _NGFMfitDistr_assignP0(SEXP pSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    assignP0(p, p0);
    return R_NilValue;
END_RCPP
}
// autoCorr
DataFrame autoCorr(NumericVector x, int maxCore);
RcppExport SEXP _NGFMfitDistr_autoCorr(SEXP xSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(autoCorr(x, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// correctMeanBias
List correctMeanBias(List distlist, NumericVector mdrs, double lim, double eps, int maxCore);
RcppExport SEXP _NGFMfitDistr_correctMeanBias(SEXP distlistSEXP, SEXP mdrsSEXP, SEXP limSEXP, SEXP epsSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type distlist(distlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mdrs(mdrsSEXP);
    Rcpp::traits::input_parameter< double >::type lim(limSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(correctMeanBias(distlist, mdrs, lim, eps, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// distances
NumericVector distances(List distlist, NumericMatrix param, double scaleEps, int scaleMaxit, int maxCore, String distanceFun, String RIBlib);
RcppExport SEXP _NGFMfitDistr_distances(SEXP distlistSEXP, SEXP paramSEXP, SEXP scaleEpsSEXP, SEXP scaleMaxitSEXP, SEXP maxCoreSEXP, SEXP distanceFunSEXP, SEXP RIBlibSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type distlist(distlistSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type scaleEps(scaleEpsSEXP);
    Rcpp::traits::input_parameter< int >::type scaleMaxit(scaleMaxitSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< String >::type distanceFun(distanceFunSEXP);
    Rcpp::traits::input_parameter< String >::type RIBlib(RIBlibSEXP);
    rcpp_result_gen = Rcpp::wrap(distances(distlist, param, scaleEps, scaleMaxit, maxCore, distanceFun, RIBlib));
    return rcpp_result_gen;
END_RCPP
}
// extractMain
List extractMain(List distlist, NumericVector MDR, bool normalizeMainPart, bool removeZeroPs);
RcppExport SEXP _NGFMfitDistr_extractMain(SEXP distlistSEXP, SEXP MDRSEXP, SEXP normalizeMainPartSEXP, SEXP removeZeroPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type distlist(distlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MDR(MDRSEXP);
    Rcpp::traits::input_parameter< bool >::type normalizeMainPart(normalizeMainPartSEXP);
    Rcpp::traits::input_parameter< bool >::type removeZeroPs(removeZeroPsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractMain(distlist, MDR, normalizeMainPart, removeZeroPs));
    return rcpp_result_gen;
END_RCPP
}
// FTDFQA
List FTDFQA(NumericMatrix TrBtable, IntegerVector supportSizes, String regridMethod, String RIBlib, bool outputProbsInRows, int fineDiscretizationSize, int maxCore, bool verbose, bool downScaleSupport);
RcppExport SEXP _NGFMfitDistr_FTDFQA(SEXP TrBtableSEXP, SEXP supportSizesSEXP, SEXP regridMethodSEXP, SEXP RIBlibSEXP, SEXP outputProbsInRowsSEXP, SEXP fineDiscretizationSizeSEXP, SEXP maxCoreSEXP, SEXP verboseSEXP, SEXP downScaleSupportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type TrBtable(TrBtableSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type supportSizes(supportSizesSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< String >::type RIBlib(RIBlibSEXP);
    Rcpp::traits::input_parameter< bool >::type outputProbsInRows(outputProbsInRowsSEXP);
    Rcpp::traits::input_parameter< int >::type fineDiscretizationSize(fineDiscretizationSizeSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type downScaleSupport(downScaleSupportSEXP);
    rcpp_result_gen = Rcpp::wrap(FTDFQA(TrBtable, supportSizes, regridMethod, RIBlib, outputProbsInRows, fineDiscretizationSize, maxCore, verbose, downScaleSupport));
    return rcpp_result_gen;
END_RCPP
}
// LBFGSBtrbFit
List LBFGSBtrbFit(NumericVector abc_lm1, DataFrame empDistr, NumericVector abcLB, NumericVector abcUB, double scaleEps, int scaleMaxit, String distanceFun, int max_iterations, String RIBlib, double hgrad, bool centralDiff, int m, double epsilon, double epsilon_rel, int past, double delta, int max_submin, int max_linesearch, double min_step, double max_step, double ftol, double wolfe);
RcppExport SEXP _NGFMfitDistr_LBFGSBtrbFit(SEXP abc_lm1SEXP, SEXP empDistrSEXP, SEXP abcLBSEXP, SEXP abcUBSEXP, SEXP scaleEpsSEXP, SEXP scaleMaxitSEXP, SEXP distanceFunSEXP, SEXP max_iterationsSEXP, SEXP RIBlibSEXP, SEXP hgradSEXP, SEXP centralDiffSEXP, SEXP mSEXP, SEXP epsilonSEXP, SEXP epsilon_relSEXP, SEXP pastSEXP, SEXP deltaSEXP, SEXP max_subminSEXP, SEXP max_linesearchSEXP, SEXP min_stepSEXP, SEXP max_stepSEXP, SEXP ftolSEXP, SEXP wolfeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type abc_lm1(abc_lm1SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type empDistr(empDistrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type abcLB(abcLBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type abcUB(abcUBSEXP);
    Rcpp::traits::input_parameter< double >::type scaleEps(scaleEpsSEXP);
    Rcpp::traits::input_parameter< int >::type scaleMaxit(scaleMaxitSEXP);
    Rcpp::traits::input_parameter< String >::type distanceFun(distanceFunSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< String >::type RIBlib(RIBlibSEXP);
    Rcpp::traits::input_parameter< double >::type hgrad(hgradSEXP);
    Rcpp::traits::input_parameter< bool >::type centralDiff(centralDiffSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_rel(epsilon_relSEXP);
    Rcpp::traits::input_parameter< int >::type past(pastSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type max_submin(max_subminSEXP);
    Rcpp::traits::input_parameter< int >::type max_linesearch(max_linesearchSEXP);
    Rcpp::traits::input_parameter< double >::type min_step(min_stepSEXP);
    Rcpp::traits::input_parameter< double >::type max_step(max_stepSEXP);
    Rcpp::traits::input_parameter< double >::type ftol(ftolSEXP);
    Rcpp::traits::input_parameter< double >::type wolfe(wolfeSEXP);
    rcpp_result_gen = Rcpp::wrap(LBFGSBtrbFit(abc_lm1, empDistr, abcLB, abcUB, scaleEps, scaleMaxit, distanceFun, max_iterations, RIBlib, hgrad, centralDiff, m, epsilon, epsilon_rel, past, delta, max_submin, max_linesearch, min_step, max_step, ftol, wolfe));
    return rcpp_result_gen;
END_RCPP
}
// LBFGSBtrbFitList
List LBFGSBtrbFitList(NumericMatrix abc, NumericVector lm1, List empDistrList, NumericVector abcLB, NumericVector abcUB, double scaleEps, int scaleMaxit, String distanceFun, int max_iterations, int maxCore, String RIBlib, int sequentialUpdate, double hgrad, bool centralDiff, int m, double epsilon, double epsilon_rel, int past, double delta, int max_submin, int max_linesearch, double min_step, double max_step, double ftol, double wolfe);
RcppExport SEXP _NGFMfitDistr_LBFGSBtrbFitList(SEXP abcSEXP, SEXP lm1SEXP, SEXP empDistrListSEXP, SEXP abcLBSEXP, SEXP abcUBSEXP, SEXP scaleEpsSEXP, SEXP scaleMaxitSEXP, SEXP distanceFunSEXP, SEXP max_iterationsSEXP, SEXP maxCoreSEXP, SEXP RIBlibSEXP, SEXP sequentialUpdateSEXP, SEXP hgradSEXP, SEXP centralDiffSEXP, SEXP mSEXP, SEXP epsilonSEXP, SEXP epsilon_relSEXP, SEXP pastSEXP, SEXP deltaSEXP, SEXP max_subminSEXP, SEXP max_linesearchSEXP, SEXP min_stepSEXP, SEXP max_stepSEXP, SEXP ftolSEXP, SEXP wolfeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type abc(abcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lm1(lm1SEXP);
    Rcpp::traits::input_parameter< List >::type empDistrList(empDistrListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type abcLB(abcLBSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type abcUB(abcUBSEXP);
    Rcpp::traits::input_parameter< double >::type scaleEps(scaleEpsSEXP);
    Rcpp::traits::input_parameter< int >::type scaleMaxit(scaleMaxitSEXP);
    Rcpp::traits::input_parameter< String >::type distanceFun(distanceFunSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< String >::type RIBlib(RIBlibSEXP);
    Rcpp::traits::input_parameter< int >::type sequentialUpdate(sequentialUpdateSEXP);
    Rcpp::traits::input_parameter< double >::type hgrad(hgradSEXP);
    Rcpp::traits::input_parameter< bool >::type centralDiff(centralDiffSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_rel(epsilon_relSEXP);
    Rcpp::traits::input_parameter< int >::type past(pastSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type max_submin(max_subminSEXP);
    Rcpp::traits::input_parameter< int >::type max_linesearch(max_linesearchSEXP);
    Rcpp::traits::input_parameter< double >::type min_step(min_stepSEXP);
    Rcpp::traits::input_parameter< double >::type max_step(max_stepSEXP);
    Rcpp::traits::input_parameter< double >::type ftol(ftolSEXP);
    Rcpp::traits::input_parameter< double >::type wolfe(wolfeSEXP);
    rcpp_result_gen = Rcpp::wrap(LBFGSBtrbFitList(abc, lm1, empDistrList, abcLB, abcUB, scaleEps, scaleMaxit, distanceFun, max_iterations, maxCore, RIBlib, sequentialUpdate, hgrad, centralDiff, m, epsilon, epsilon_rel, past, delta, max_submin, max_linesearch, min_step, max_step, ftol, wolfe));
    return rcpp_result_gen;
END_RCPP
}
// igscore
NumericVector igscore(List X, NumericVector x, bool redistributePwithin);
RcppExport SEXP _NGFMfitDistr_igscore(SEXP XSEXP, SEXP xSEXP, SEXP redistributePwithinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type redistributePwithin(redistributePwithinSEXP);
    rcpp_result_gen = Rcpp::wrap(igscore(X, x, redistributePwithin));
    return rcpp_result_gen;
END_RCPP
}
// igscoreMean
double igscoreMean(List X, List truePMF, bool redistributePwithin, bool symmetricScore);
RcppExport SEXP _NGFMfitDistr_igscoreMean(SEXP XSEXP, SEXP truePMFSEXP, SEXP redistributePwithinSEXP, SEXP symmetricScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type truePMF(truePMFSEXP);
    Rcpp::traits::input_parameter< bool >::type redistributePwithin(redistributePwithinSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetricScore(symmetricScoreSEXP);
    rcpp_result_gen = Rcpp::wrap(igscoreMean(X, truePMF, redistributePwithin, symmetricScore));
    return rcpp_result_gen;
END_RCPP
}
// findEmpDistrGivenMDR
List findEmpDistrGivenMDR(List X, NumericVector MDR, NumericVector MDRwanted, IntegerVector sizeWanted, int maxCore, String regridMethod);
RcppExport SEXP _NGFMfitDistr_findEmpDistrGivenMDR(SEXP XSEXP, SEXP MDRSEXP, SEXP MDRwantedSEXP, SEXP sizeWantedSEXP, SEXP maxCoreSEXP, SEXP regridMethodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MDR(MDRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MDRwanted(MDRwantedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizeWanted(sizeWantedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    rcpp_result_gen = Rcpp::wrap(findEmpDistrGivenMDR(X, MDR, MDRwanted, sizeWanted, maxCore, regridMethod));
    return rcpp_result_gen;
END_RCPP
}
// longestIncreasingSubseqSlow
IntegerVector longestIncreasingSubseqSlow(NumericVector x);
RcppExport SEXP _NGFMfitDistr_longestIncreasingSubseqSlow(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(longestIncreasingSubseqSlow(x));
    return rcpp_result_gen;
END_RCPP
}
// longestIncreasingSubseq
IntegerVector longestIncreasingSubseq(NumericVector x);
RcppExport SEXP _NGFMfitDistr_longestIncreasingSubseq(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(longestIncreasingSubseq(x));
    return rcpp_result_gen;
END_RCPP
}
// longestNonDecreasingSubseq
IntegerVector longestNonDecreasingSubseq(NumericVector x);
RcppExport SEXP _NGFMfitDistr_longestNonDecreasingSubseq(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(longestNonDecreasingSubseq(x));
    return rcpp_result_gen;
END_RCPP
}
// makeEmpDistr
DataFrame makeEmpDistr(NumericVector x, DataFrame pmf, double w, int rstSize, String regridMethod, double fixedMin, double fixedMax, double biasCorrectionMultiplier);
RcppExport SEXP _NGFMfitDistr_makeEmpDistr(SEXP xSEXP, SEXP pmfSEXP, SEXP wSEXP, SEXP rstSizeSEXP, SEXP regridMethodSEXP, SEXP fixedMinSEXP, SEXP fixedMaxSEXP, SEXP biasCorrectionMultiplierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type pmf(pmfSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type rstSize(rstSizeSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< double >::type fixedMin(fixedMinSEXP);
    Rcpp::traits::input_parameter< double >::type fixedMax(fixedMaxSEXP);
    Rcpp::traits::input_parameter< double >::type biasCorrectionMultiplier(biasCorrectionMultiplierSEXP);
    rcpp_result_gen = Rcpp::wrap(makeEmpDistr(x, pmf, w, rstSize, regridMethod, fixedMin, fixedMax, biasCorrectionMultiplier));
    return rcpp_result_gen;
END_RCPP
}
// makeEmpDistrList
List makeEmpDistrList(NumericVector X, IntegerMatrix windows, IntegerVector rstSizes, String regridMethod, int maxCore, double fixedMin, double fixedMax, NumericVector biasCorrectionMultiplier);
RcppExport SEXP _NGFMfitDistr_makeEmpDistrList(SEXP XSEXP, SEXP windowsSEXP, SEXP rstSizesSEXP, SEXP regridMethodSEXP, SEXP maxCoreSEXP, SEXP fixedMinSEXP, SEXP fixedMaxSEXP, SEXP biasCorrectionMultiplierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type windows(windowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rstSizes(rstSizesSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< double >::type fixedMin(fixedMinSEXP);
    Rcpp::traits::input_parameter< double >::type fixedMax(fixedMaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type biasCorrectionMultiplier(biasCorrectionMultiplierSEXP);
    rcpp_result_gen = Rcpp::wrap(makeEmpDistrList(X, windows, rstSizes, regridMethod, maxCore, fixedMin, fixedMax, biasCorrectionMultiplier));
    return rcpp_result_gen;
END_RCPP
}
// mixDistrList
List mixDistrList(List X, List Y, IntegerVector rstSizes, NumericVector Yweights, String regridMethod, int maxCore);
RcppExport SEXP _NGFMfitDistr_mixDistrList(SEXP XSEXP, SEXP YSEXP, SEXP rstSizesSEXP, SEXP YweightsSEXP, SEXP regridMethodSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rstSizes(rstSizesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yweights(YweightsSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(mixDistrList(X, Y, rstSizes, Yweights, regridMethod, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// mixDistr
List mixDistr(List X, List Y, int rstSize, double yweight, String regridMethod);
RcppExport SEXP _NGFMfitDistr_mixDistr(SEXP XSEXP, SEXP YSEXP, SEXP rstSizeSEXP, SEXP yweightSEXP, SEXP regridMethodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type rstSize(rstSizeSEXP);
    Rcpp::traits::input_parameter< double >::type yweight(yweightSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    rcpp_result_gen = Rcpp::wrap(mixDistr(X, Y, rstSize, yweight, regridMethod));
    return rcpp_result_gen;
END_RCPP
}
// movingAverage
SEXP movingAverage(NumericVector x, int windowSize, int speed, bool returnWindows);
RcppExport SEXP _NGFMfitDistr_movingAverage(SEXP xSEXP, SEXP windowSizeSEXP, SEXP speedSEXP, SEXP returnWindowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< int >::type speed(speedSEXP);
    Rcpp::traits::input_parameter< bool >::type returnWindows(returnWindowsSEXP);
    rcpp_result_gen = Rcpp::wrap(movingAverage(x, windowSize, speed, returnWindows));
    return rcpp_result_gen;
END_RCPP
}
// movingAverageSmoothing
NumericVector movingAverageSmoothing(NumericVector x, int windowSize, int iterations);
RcppExport SEXP _NGFMfitDistr_movingAverageSmoothing(SEXP xSEXP, SEXP windowSizeSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(movingAverageSmoothing(x, windowSize, iterations));
    return rcpp_result_gen;
END_RCPP
}
// windowVariances
DataFrame windowVariances(NumericVector x, double windowSizePercentageIncrement, int maxCore);
RcppExport SEXP _NGFMfitDistr_windowVariances(SEXP xSEXP, SEXP windowSizePercentageIncrementSEXP, SEXP maxCoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type windowSizePercentageIncrement(windowSizePercentageIncrementSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    rcpp_result_gen = Rcpp::wrap(windowVariances(x, windowSizePercentageIncrement, maxCore));
    return rcpp_result_gen;
END_RCPP
}
// solve_d
NumericVector solve_d(NumericVector abc_lm1, double eps, int maxit, bool useNewton, String RIBlib);
RcppExport SEXP _NGFMfitDistr_solve_d(SEXP abc_lm1SEXP, SEXP epsSEXP, SEXP maxitSEXP, SEXP useNewtonSEXP, SEXP RIBlibSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type abc_lm1(abc_lm1SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type useNewton(useNewtonSEXP);
    Rcpp::traits::input_parameter< String >::type RIBlib(RIBlibSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_d(abc_lm1, eps, maxit, useNewton, RIBlib));
    return rcpp_result_gen;
END_RCPP
}
// upScaleAndBoundPMF
List upScaleAndBoundPMF(List pmf, double upperBound, NumericVector upscaler, String regridMethod);
RcppExport SEXP _NGFMfitDistr_upScaleAndBoundPMF(SEXP pmfSEXP, SEXP upperBoundSEXP, SEXP upscalerSEXP, SEXP regridMethodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pmf(pmfSEXP);
    Rcpp::traits::input_parameter< double >::type upperBound(upperBoundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upscaler(upscalerSEXP);
    Rcpp::traits::input_parameter< String >::type regridMethod(regridMethodSEXP);
    rcpp_result_gen = Rcpp::wrap(upScaleAndBoundPMF(pmf, upperBound, upscaler, regridMethod));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NGFMfitDistr_p0ensembleLDSlinear", (DL_FUNC) &_NGFMfitDistr_p0ensembleLDSlinear, 10},
    {"_NGFMfitDistr_makeP0test", (DL_FUNC) &_NGFMfitDistr_makeP0test, 5},
    {"_NGFMfitDistr_p0ensembleLDSlinearOld", (DL_FUNC) &_NGFMfitDistr_p0ensembleLDSlinearOld, 10},
    {"_NGFMfitDistr_assignP0", (DL_FUNC) &_NGFMfitDistr_assignP0, 2},
    {"_NGFMfitDistr_autoCorr", (DL_FUNC) &_NGFMfitDistr_autoCorr, 2},
    {"_NGFMfitDistr_correctMeanBias", (DL_FUNC) &_NGFMfitDistr_correctMeanBias, 5},
    {"_NGFMfitDistr_distances", (DL_FUNC) &_NGFMfitDistr_distances, 7},
    {"_NGFMfitDistr_extractMain", (DL_FUNC) &_NGFMfitDistr_extractMain, 4},
    {"_NGFMfitDistr_FTDFQA", (DL_FUNC) &_NGFMfitDistr_FTDFQA, 9},
    {"_NGFMfitDistr_LBFGSBtrbFit", (DL_FUNC) &_NGFMfitDistr_LBFGSBtrbFit, 22},
    {"_NGFMfitDistr_LBFGSBtrbFitList", (DL_FUNC) &_NGFMfitDistr_LBFGSBtrbFitList, 25},
    {"_NGFMfitDistr_igscore", (DL_FUNC) &_NGFMfitDistr_igscore, 3},
    {"_NGFMfitDistr_igscoreMean", (DL_FUNC) &_NGFMfitDistr_igscoreMean, 4},
    {"_NGFMfitDistr_findEmpDistrGivenMDR", (DL_FUNC) &_NGFMfitDistr_findEmpDistrGivenMDR, 6},
    {"_NGFMfitDistr_longestIncreasingSubseqSlow", (DL_FUNC) &_NGFMfitDistr_longestIncreasingSubseqSlow, 1},
    {"_NGFMfitDistr_longestIncreasingSubseq", (DL_FUNC) &_NGFMfitDistr_longestIncreasingSubseq, 1},
    {"_NGFMfitDistr_longestNonDecreasingSubseq", (DL_FUNC) &_NGFMfitDistr_longestNonDecreasingSubseq, 1},
    {"_NGFMfitDistr_makeEmpDistr", (DL_FUNC) &_NGFMfitDistr_makeEmpDistr, 8},
    {"_NGFMfitDistr_makeEmpDistrList", (DL_FUNC) &_NGFMfitDistr_makeEmpDistrList, 8},
    {"_NGFMfitDistr_mixDistrList", (DL_FUNC) &_NGFMfitDistr_mixDistrList, 6},
    {"_NGFMfitDistr_mixDistr", (DL_FUNC) &_NGFMfitDistr_mixDistr, 5},
    {"_NGFMfitDistr_movingAverage", (DL_FUNC) &_NGFMfitDistr_movingAverage, 4},
    {"_NGFMfitDistr_movingAverageSmoothing", (DL_FUNC) &_NGFMfitDistr_movingAverageSmoothing, 3},
    {"_NGFMfitDistr_windowVariances", (DL_FUNC) &_NGFMfitDistr_windowVariances, 3},
    {"_NGFMfitDistr_solve_d", (DL_FUNC) &_NGFMfitDistr_solve_d, 5},
    {"_NGFMfitDistr_upScaleAndBoundPMF", (DL_FUNC) &_NGFMfitDistr_upScaleAndBoundPMF, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_NGFMfitDistr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
